#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('angular2-nodejs:server');
var http = require('http');
const socketIO = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socketIO(server);
///localhost:3000/socket.io/socket.io.js



const {
  isRealString
} = require('../utils/validation');
const message = require('../utils/message');

let {
  generateMessage,
  generateLocationMessage
} = require('../utils/message');

const {
  Users
} = require('../utils/users');

let users = new Users();

let getUserName = (id) => {
  let name = "";
  let user = users.getUser(id);
  if (user && user.name) {
    name = user.name;
  };

  return name;

}

io.on('connection', (socket) => {
  console.log('New user connected');
  socket.on('disconnect', () => {
    console.log("Client Disconnected");
    disconnectUser(socket.id);
  });

  socket.on('join', (name, callback) => {
    console.log("join  name:", name);
    if (!isRealString(name)) {
      return callback("Name is required");
    };
    users.removeUser(socket.id);
    let user = users.addUser(socket.id, name);
    console.log("User added :", user, users);
    //socket.leave(params.room);
    // io.emit // every connected user 
    // io.to(params.room).emit
    // socket.broadcast.emit // every connected user  other than current user
    // socket.broadcast.to(params.room).emit
    // socket.emit // single user
    // socket.emit from admin text welcome to the chat app


    socket.emit('newMessage', generateMessage(toChatUser('Admin', 'Admin'), "Welcome to Celebrate Mum and Dad"));

    // socket.broadcast.emit from admin new user joined

    socket.broadcast.emit('newMessage', generateMessage(toChatUser('Admin', 'Admin'), `${name} has joined Celebrate Mum and Dad`));

    io.emit('updateUserList', users.getUserList());

    callback();
  });


  socket.on('createMessage', (msg, callback) => {
    console.log("Create Message1", msg, socket.id);
    let user = {
      name: "Admin"
    };
    if (!msg.sendAsAdmin) {
      user = users.getUser(socket.id);
    };

    console.log("Create Message user", user);

    if (user && isRealString(msg.text)) {
      //msg.from = user.name;

      console.log("Create Message2", msg);

      if (msg.socketId && isRealString(msg.socketId)) {
        io.to(msg.socketId).emit('newMessage', generateMessage(toChatUser(user.name, socket.id), msg.text));
        //socket(msg.socketId).emit('newMessage', generateMessage(toChatUser(user.name, socket.id), msg.text));
      } else {
        socket.broadcast.emit('newMessage', generateMessage(toChatUser(user.name, socket.id), msg.text));
      }


    };

    callback();
    //socket.broadcast.emit('newMessage', msg); // emits to everyone but whoever initiated the event
  });

  socket.on('createLocationMessage', (coords, callback) => {
    console.log("CreateLocationMessage1", coords, socket.id);
    let user = users.getUser(socket.id);
    if (user) {
      console.log("createLocationMessage2", coords, user);

      if (coords.socketId && isRealString(coords.socketId)) {
        io.to(coords.socketId).emit('newMessage', generateLocationMessage(toChatUser(user.name, socket.id), coords.latitude, coords.longitude));
        //socket(msg.socketId).emit('newMessage', generateMessage(toChatUser(user.name, socket.id), msg.text));
      } else {
        socket.broadcast.emit('newMessage', generateLocationMessage(toChatUser(user.name, socket.id), coords.latitude, coords.longitude));
      }

    };
    callback();
  });



  socket.on('userCreated', (user, callback) => {

    console.log("userCreated", user, socket.id);

    socket.broadcast.emit('createdUser', user, getUserName(socket.id));
    callback();
  });

  socket.on('userDeleted', (user, callback) => {

    console.log("userDeleted", user, socket.id);

    socket.broadcast.emit('deletedUser', user._creatorRef, getUserName(socket.id));
    callback();
  });



  socket.on('userUpdated', (user, callback) => {

    console.log("userUpdated", user, socket.id);


    socket.broadcast.emit('updatedUser', user, getUserName(socket.id));
    callback();
  });

  socket.on('photoCreated', (photo, callback) => {

    console.log("photoCreated", photo, socket.id);

    socket.broadcast.emit('createdPhoto', photo, getUserName(socket.id));
    callback();
  });

  socket.on('photoDeleted', (photo, callback) => {

    console.log("photoDeleted", photo, socket.id);

    socket.broadcast.emit('deletedPhoto', photo._creatorRef, getUserName(socket.id));
    callback();
  });



  socket.on('photoUpdated', (photo, callback) => {

    console.log("photoUpdated", photo, socket.id);


    socket.broadcast.emit('updatedPhoto', photo, getUserName(socket.id));
    callback();
  });

  socket.on('memoryCreated', (memory, callback) => {

    console.log("memoryCreated", memory, socket.id);

    socket.broadcast.emit('createdPhoto', memory, getUserName(socket.id));
    callback();
  });

  socket.on('memoryDeleted', (memory, callback) => {

    console.log("memoryDeleted", memory, socket.id);

    socket.broadcast.emit('deletedPhoto', memory._creatorRef, getUserName(socket.id));
    callback();
  });



  socket.on('memoryUpdated', (memory, callback) => {

    console.log("memoryUpdated", memory, socket.id);

    
    socket.broadcast.emit('updatedPhoto', memory, getUserName(socket.id));
    callback();
  });


  socket.on('disconnect', () => {
    console.log("disconnect");
    let user = users.removeUser(socket.id);
    disconnectUser(socket.id);
  });

  socket.on('logOut', () => {
    console.log("logOut");
    disconnectUser(socket.id);
  });

});

toChatUser = function (name, id) {
  return {
    'name': name,
    'id': id
  };
}

disconnectUser = function (socketId) {
  let user = users.removeUser(socketId);
  console.log("disconnect user: ", user);
  if (user) {
    io.emit('updateUserList', users.getUserList());
    io.emit('newMessage', generateMessage(toChatUser('Admin', 'Admin'), `${user.name} has left.`));
  }
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
