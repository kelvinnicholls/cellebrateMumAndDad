#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('angular2-nodejs:server');
var http = require('http');
const socketIO = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socketIO(server);
///localhost:3000/socket.io/socket.io.js



const {
  isRealString
} = require('../utils/validation');
const message = require('../utils/message');

let {
  generateMessage,
  generateLocationMessage
} = require('../utils/message');

const {
  Users
} = require('../utils/users');

let users = new Users();

io.on('connection', (socket) => {
  console.log('New user connected');
  socket.on('disconnect', () => {
    console.log("Client Disconnected");
  });

  socket.on('join', (params, callback) => {
    if (!isRealString(params.name) || !isRealString(params.room)) {
      return callback("Name and room are required");
    };
    socket.join(params.room);
    users.removeUser(socket.id);
    let user = users.addUser(socket.id, params.name, params.room);
    console.log("User added :", user, users);
    //socket.leave(params.room);

    // io.emit // every connected user 
    // io.to(params.room).emit

    // socket.broadcast.emit // every connected user  other thsn current user
    // socket.broadcast.to(params.room).emit

    // socket.emit // single user


    // socket.emit from admin text welcome to the chat app



    socket.emit('newMessage', generateMessage('Admin', "Welcome to the chat app"));

    // socket.broadcast.emit from admin new user joined

    socket.broadcast.to(params.room).emit('newMessage', generateMessage('Admin', `${params.name} has joined the ${params.room} room.`));

    io.to(params.room).emit('updateUserList', users.getUserList(params.room));

    callback();
  });

  socket.on('createMessage', (msg, callback) => {

    let user = null;
    if (isRealString(msg.from)) {
      user = users.getUser(msg.from);
    }
    if (user && isRealString(msg.text)) {
      msg.from = user.name;
      msg.createdAt = new Date().getTime();

      console.log("Create Message", msg);
      //io.emit emits an event to a every single connection
      io.emit('newMessage', msg);
    }

    callback();
    //socket.broadcast.emit('newMessage', msg); // emits to everyone but whoever initiated the event
  });

  socket.on('CreateLocationMessage', (coords) => {
    let user = users.getUser(socket.id);
    if (user) {
      io.emit('newLocationMessage', generateLocationMessage(user.name, coords.latitude, coords.longitude));
    }
  });


  socket.on('disconnect', () => {
    let user = users.removeUser(socket.id);
    if (user) {
      io.emit('updateUserList', users.getUserList());
      io.emit('newMessage', generateMessage('Admin', `${user.name} has left.`));
    }
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
